class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        int n= candidates.length;
        Arrays.sort(candidates);        
        List<List<Integer>> res= new ArrayList<>();
        List<Integer> li= new ArrayList<>();

        helper(res,li,n,candidates,0,target);
        return res;
    }
    public static void helper(List<List<Integer>> res,List<Integer> li, int n, int[] candidates, int i,int target){
        if(target==0){
            res.add(new ArrayList(li));
            return;
        }
        for(int j=i;j<n;j++){
            if(j>i && candidates[j]==candidates[j-1]){
                continue;
            }
            if(candidates[j]>target){
                break;
            }
            li.add(candidates[j]);
            helper(res,li,n,candidates,j+1,target-candidates[j]);
            li.removeLast();
        }
    }
}
